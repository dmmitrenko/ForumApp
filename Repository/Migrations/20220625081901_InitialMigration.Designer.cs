// <auto-generated />
using System;
using ForumApp.Repository.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ForumApp.Repository.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20220625081901_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ForumApp.Entities.Models.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BlogId");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastChange")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Blogs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2409f6fa-464d-4db7-ba7f-3129b62ab0e1"),
                            DateAdded = new DateTime(2022, 6, 25, 11, 19, 1, 191, DateTimeKind.Local).AddTicks(9617),
                            LastChange = new DateTime(2022, 6, 25, 11, 19, 1, 191, DateTimeKind.Local).AddTicks(9631),
                            Text = "Bye world!",
                            Title = "About me",
                            UserId = new Guid("11b3a2fc-8d75-45de-9990-00d5d5159c2d")
                        },
                        new
                        {
                            Id = new Guid("9fbf9c03-1e67-4cda-89ed-bf3a7a5da11a"),
                            DateAdded = new DateTime(2022, 6, 25, 11, 19, 1, 191, DateTimeKind.Local).AddTicks(9641),
                            LastChange = new DateTime(2022, 6, 25, 11, 19, 1, 191, DateTimeKind.Local).AddTicks(9644),
                            Text = "Hello world!",
                            Title = "About me",
                            UserId = new Guid("f5f9c508-5b57-4e17-bb05-5da2183e931e")
                        });
                });

            modelBuilder.Entity("ForumApp.Entities.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CommentId");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastChange")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe5d3bc3-cc2e-4060-8dae-fb010dcdd0be"),
                            BlogId = new Guid("2409f6fa-464d-4db7-ba7f-3129b62ab0e1"),
                            DateAdded = new DateTime(2022, 6, 25, 11, 19, 1, 191, DateTimeKind.Local).AddTicks(9777),
                            LastChange = new DateTime(2022, 6, 25, 11, 19, 1, 191, DateTimeKind.Local).AddTicks(9781),
                            Text = "Good!",
                            UserId = new Guid("f5f9c508-5b57-4e17-bb05-5da2183e931e")
                        },
                        new
                        {
                            Id = new Guid("9b5d639c-200a-49f7-b944-c278bfc33a5a"),
                            BlogId = new Guid("9fbf9c03-1e67-4cda-89ed-bf3a7a5da11a"),
                            DateAdded = new DateTime(2022, 6, 25, 11, 19, 1, 191, DateTimeKind.Local).AddTicks(9789),
                            LastChange = new DateTime(2022, 6, 25, 11, 19, 1, 191, DateTimeKind.Local).AddTicks(9792),
                            Text = "Not good!",
                            UserId = new Guid("11b3a2fc-8d75-45de-9990-00d5d5159c2d")
                        });
                });

            modelBuilder.Entity("ForumApp.Entities.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.Property<DateTime>("DateRegistration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5f9c508-5b57-4e17-bb05-5da2183e931e"),
                            DateRegistration = new DateTime(2022, 6, 25, 11, 19, 1, 191, DateTimeKind.Local).AddTicks(8049),
                            Email = "fil@gmail.com",
                            Name = "Kateryna",
                            Nickname = "filinskaya",
                            Role = 1,
                            Surname = "Filinska"
                        },
                        new
                        {
                            Id = new Guid("11b3a2fc-8d75-45de-9990-00d5d5159c2d"),
                            DateRegistration = new DateTime(2022, 6, 25, 11, 19, 1, 191, DateTimeKind.Local).AddTicks(8101),
                            Email = "dmmytrenko@gmail.com",
                            Name = "Serhii",
                            Nickname = "dmytrenko",
                            Role = 0,
                            Surname = "Dmytrenko"
                        });
                });

            modelBuilder.Entity("ForumApp.Entities.Models.Blog", b =>
                {
                    b.HasOne("ForumApp.Entities.Models.User", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ForumApp.Entities.Models.Comment", b =>
                {
                    b.HasOne("ForumApp.Entities.Models.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ForumApp.Entities.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ForumApp.Entities.Models.Blog", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("ForumApp.Entities.Models.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
